colnames(highested_data) <- c("region", "country", "Primary", "Secondary.incomplete", "Secondary.vocational",
"Secondary.preparatory", "Tertiary.incomplete", "Tertiary")
# for gender
str(highested)
View(highested)
str(highested)
str(gender)
x <- gender[(gender$country== "Albania"),]
x <- melt(x[,c('country','male','female')],id.vars = 1)
x1 <- ggplot(data=x, aes(x=variable, y=value))
x1 <- x1 + geom_bar(aes(fill = variable), position="dodge", stat="identity")
x1 <- x1 + labs(y = 'Percent of members', x = '') + ylim(0, 1)
x1
str(x)
str(y)
y <- highested[(highested$country == "Zimbabwe"),]
y$region <- as.character(y$region)
y$country <- as.character(y$country)
y <-melt(y[, c('country','Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')], id.vars = 1)
str(y)
y <- highested[(highested$country == "Zimbabwe"),]
str(y)
str(x)
y <-melt(y[, c('country','Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')], id.vars = 1)
(y1 <- ggplot(data=y, aes(x=variable, y=value))
y1 <- ggplot(data=y, aes(x=variable, y=value))
y1 <- y1 + geom_bar(aes(fill = variable), position="dodge", stat="identity") + scale_fill_manual(values=cbbPalette1)
y1 <- ggplot(data=y, aes(x=variable, y=value))
y1 <- y1 + geom_bar(aes(fill = variable), position="dodge", stat="identity") + scale_fill_manual(values=cbbPalette1)
y1 <- y1 + labs(y = 'Percent of members', x = '') + theme(axis.text.x = element_blank()) + ylim(0, 1) +
theme(legend.title=element_blank())
y1
cbbPalette1 <- c("#F7BE81", "#F79F81", "#82FA58", "#04B486", "#00BFFF", "#01A9DB")
y1
shiny::runApp('Developing_data_products')
str(highested)
shiny::runApp('Developing_data_products')
shiny::runApp('Developing_data_products')
shiny::runApp('Developing_data_products')
shiny::runApp('Developing_data_products')
shiny::runApp('Developing_data_products')
colourPalette1 <-c("#F5A9A9", "#F6D8CE", "#F8ECE0", "#EFFBFB", "#E0F2F7", "#CEE3F6", "#A9BCF5")
world <- joinCountryData2Map(wvs_c
,joinCode = "ISO3"
,nameJoinColumn = "iso3"
,mapResolution="li")
mapCountryData(world, colourPalette=colourPalette1
,mapTitle='Percent of respondents belonging to an association'
,nameColumnToPlot='participation')
library(rworldmap)
colourPalette1 <-c("#F5A9A9", "#F6D8CE", "#F8ECE0", "#EFFBFB", "#E0F2F7", "#CEE3F6", "#A9BCF5")
world <- joinCountryData2Map(wvs_c
,joinCode = "ISO3"
,nameJoinColumn = "iso3"
,mapResolution="li")
mapCountryData(world, colourPalette=colourPalette1
,mapTitle='Percent of respondents belonging to an association'
,nameColumnToPlot='participation')
colourPalette1 <-c("#F5A9A9", "#F6D8CE", "#F8ECE0", "#EFFBFB", "#E0F2F7", "#CEE3F6", "#A9BCF5")
world <- joinCountryData2Map(wvs_c
,joinCode = "ISO3"
,nameJoinColumn = "iso3"
,mapResolution="li"
,verbose=TRUE)
mapCountryData(world, colourPalette=colourPalette1
,mapTitle='Percent of respondents belonging to an association'
,nameColumnToPlot='participation')
test3<- aggregate(highested_data[, c('Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')],
by = list(as.character(highested_data$region)), function(x) c(mean=mean(x)))
colnames(test3)[1] <- "region"
test3 <- melt(test3[, c('region','Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')], id.vars = 1)
test3$region[test3$region=="region1"] <- "North America & Western Europe"
test3$region[test3$region=="region2"] <- "Central Europe"
test3$region[test3$region=="region3"] <- "Asia"
test3$region[test3$region=="region4"] <- "Latin American & Caribbean"
test3$region[test3$region=="region5"] <- "Sub-Saharan Africa"
test3$region[test3$region=="region6"] <- "Middle East & North Africa"
test3$region[test3$region=="region7"] <- "Oceania"
d1 <- ggplot(data=test3, aes(x=variable, y=value))
d1 <- d1 + geom_line(aes(group=region, color=region))
d1 <- d1 + geom_point(aes(color=region, shape=region))
d1 <- d1 + labs(y = 'Percent of members', x = 'Highest education level') + ylim(0, 1) + theme(axis.text.x=element_text(angle=-90))
d1
gender <- wvs_c[,c(2, 4:6)]
highested <- wvs_c[,c(2, 4, 12:17)]
gender_table <- wvs_table[,c(2, 4:6)]
highested_table  <- wvs_c[,c(2, 4, 12:17)]
colnames(highested) <- c("region", "country", "Primary", "Secondary.incomplete", "Secondary.vocational",
"Secondary.preparatory", "Tertiary.incomplete", "Tertiary")
highested_data <- highested[complete.cases(highested),]
colnames(highested_data) <- c("region", "country", "Primary", "Secondary.incomplete", "Secondary.vocational",
"Secondary.preparatory", "Tertiary.incomplete", "Tertiary")
# regional sum graph
test3<- aggregate(highested_data[, c('Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')],
by = list(as.character(highested_data$region)), function(x) c(mean=mean(x)))
colnames(test3)[1] <- "region"
test3 <- melt(test3[, c('region','Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')], id.vars = 1)
test3$region[test3$region=="region1"] <- "North America & Western Europe"
test3$region[test3$region=="region2"] <- "Central Europe"
test3$region[test3$region=="region3"] <- "Asia"
test3$region[test3$region=="region4"] <- "Latin American & Caribbean"
test3$region[test3$region=="region5"] <- "Sub-Saharan Africa"
test3$region[test3$region=="region6"] <- "Middle East & North Africa"
test3$region[test3$region=="region7"] <- "Oceania"
d1 <- ggplot(data=test3, aes(x=variable, y=value))
d1 <- d1 + geom_line(aes(group=region, color=region))
d1 <- d1 + geom_point(aes(color=region, shape=region))
d1 <- d1 + labs(y = 'Percent of members', x = 'Highest education level') + ylim(0, 1) + theme(axis.text.x=element_text(angle=-90))
d1
library(reshape)
# regional sum graph
test3<- aggregate(highested_data[, c('Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')],
by = list(as.character(highested_data$region)), function(x) c(mean=mean(x)))
colnames(test3)[1] <- "region"
test3 <- melt(test3[, c('region','Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')], id.vars = 1)
test3$region[test3$region=="region1"] <- "North America & Western Europe"
test3$region[test3$region=="region2"] <- "Central Europe"
test3$region[test3$region=="region3"] <- "Asia"
test3$region[test3$region=="region4"] <- "Latin American & Caribbean"
test3$region[test3$region=="region5"] <- "Sub-Saharan Africa"
test3$region[test3$region=="region6"] <- "Middle East & North Africa"
test3$region[test3$region=="region7"] <- "Oceania"
d1 <- ggplot(data=test3, aes(x=variable, y=value))
d1 <- d1 + geom_line(aes(group=region, color=region))
d1 <- d1 + geom_point(aes(color=region, shape=region))
d1 <- d1 + labs(y = 'Percent of members', x = 'Highest education level') + ylim(0, 1) + theme(axis.text.x=element_text(angle=-90))
d1
library(ggplot2)
# regional sum graph
test3<- aggregate(highested_data[, c('Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')],
by = list(as.character(highested_data$region)), function(x) c(mean=mean(x)))
colnames(test3)[1] <- "region"
test3 <- melt(test3[, c('region','Primary','Secondary.incomplete','Secondary.vocational'
,'Secondary.preparatory','Tertiary.incomplete','Tertiary')], id.vars = 1)
test3$region[test3$region=="region1"] <- "North America & Western Europe"
test3$region[test3$region=="region2"] <- "Central Europe"
test3$region[test3$region=="region3"] <- "Asia"
test3$region[test3$region=="region4"] <- "Latin American & Caribbean"
test3$region[test3$region=="region5"] <- "Sub-Saharan Africa"
test3$region[test3$region=="region6"] <- "Middle East & North Africa"
test3$region[test3$region=="region7"] <- "Oceania"
d1 <- ggplot(data=test3, aes(x=variable, y=value))
d1 <- d1 + geom_line(aes(group=region, color=region))
d1 <- d1 + geom_point(aes(color=region, shape=region))
d1 <- d1 + labs(y = 'Percent of members', x = 'Highest education level') + ylim(0, 1) + theme(axis.text.x=element_text(angle=-90))
d1
d1 <- ggplot(data=test3, aes(x=variable, y=value))
d1 <- d1 + geom_line(aes(group=region, color=region))
d1 <- d1 + geom_point(aes(color=region, shape=region))
d1 <- d1 + labs(y = 'Percent of members', x = '') + ylim(0, 1) + theme(axis.text.x=element_text(angle=-90))
d1
data(Default)
library(Default)
library("Default")
library(ISLR)
data(Default)
library(ISLR)
data(Default)
attach(Default)
head(Default)
fit <- glm(default ~ balance + income, data=Default, family=binomial
fit <- glm(default ~ balance + income, data=Default, family=binomial)
fit <- glm(default ~ balance + income, data=Default, family=binomial)
summary(fit)
dim(Default)[1]
dim(Default)[1]/2
train = sample(dim(Default)[1], dim(Default)[1]/2)
glm.fit = glm(default ~ income + balance, data = Default, family = binomial,
subset = train)
glm.pred = rep("No", dim(Default)[1]/2)
glm.probs = predict(glm.fit, Default[-train, ], type = "response")
glm.pred[glm.probs > 0.5] = "Yes"
return(mean(glm.pred != Default[-train, ]$default))
mean(glm.pred != Default[-train, ]$default)
1.
set.seed(1)
fit <- glm(default ~ balance + income, data=Default, family=binomial)
summary(fit)
2.
FiveB = function() {
# i.
train = sample(dim(Default)[1], dim(Default)[1]/2)
# ii.
glm.fit = glm(default ~ income + balance, data = Default, family = binomial,
subset = train)
# iii.
glm.pred = rep("No", dim(Default)[1]/2) #generate all NO responses for the validation set
glm.probs = predict(glm.fit, Default[-train, ], type = "response") #predict using the validation set
glm.pred[glm.probs > 0.5] = "Yes" #classifying individuals with posterior probability > 0.5
# iv.
return(mean(glm.pred != Default[-train, ]$default))
}
FiveB()
FiveB()
CV = function() {
# i.
train = sample(dim(Default)[1], dim(Default)[1]/2)
# ii.
glm.fit = glm(default ~ income + balance, data = Default, family = binomial,
subset = train)
# iii.
glm.pred = rep("No", dim(Default)[1]/2) #generate all NO responses for the validation set
glm.probs = predict(glm.fit, Default[-train, ], type = "response") #predict using the validation set
glm.pred[glm.probs > 0.5] = "Yes" #classifying individuals with posterior probability > 0.5
# iv.
return(mean(glm.pred != Default[-train, ]$default))
}
CV()
CV()
CV()
CV()
CV()
CV()
CV1 = function() {
# i.
train = sample(dim(Default)[1], dim(Default)[1]/2)
# ii.
glm.fit = glm(default ~ income + balance + student, data = Default, family = binomial,
subset = train)
# iii.
glm.pred = rep("No", dim(Default)[1]/2) #generate all NO responses for the validation set
glm.probs = predict(glm.fit, Default[-train, ], type = "response") #predict using the validation set
glm.pred[glm.probs > 0.5] = "Yes" #classifying individuals with posterior probability > 0.5
# iv.
return(mean(glm.pred != Default[-train, ]$default))
}
CV1()
CV1()
CV1()
summary(glm.fit = glm(default ~ income + balance, data = Default, family = binomial))
summary(glm(default ~ income + balance, data = Default, family = binomial))
boot.fn = function(data, index) {
x <- glm(default ~ income + balance, data = data, family = binomial, subset = index)
return(coef(x))
}
?boot()
install.packages('boot')
library(boot)
?boot()
boot(Default, boot.fn, 100)
set.seed(3)
y = rnorm(100)
x = rnorm(100)
y = x - 2 * x^2 + rnorm(100)
plot(x, y)
dat <- as.data.frame(cbind(, c(x, y)))
dat <- as.data.frame(cbind(c(x, y)))
View(dat)
dat <- as.data.frame(cbind(c(x, y)), ncol=2)
dat <- as.data.frame(cbind(c(x, y)), ncol=2)
?as.data.frame()
dat <- as.data.frame((c(x, y)), ncol=2)
dat <- as.data.frame(c(x, y), ncol=2)
typeof(x)
l <- list(x, y)
library(plyr)
dat <- ldply(l, data.frame)
View(dat)
View(dat)
dat <- as.data.frame(cbind(x, y), ncol=2)
View(dat)
dat <- as.data.frame(cbind(x, y))
View(dat)
rm(dat)
dat <- as.data.frame(cbind(x, y))
View(dat)
i <- glm(y ~ x, data=dat)
cv.error = cv.glm(dat, i)
cv.error
ii <- glm(y ~ x + x^2, data=dat)
cv.error = cv.glm(dat, ii)
cv.error$delta
<- glm(y ~ x + x^2 + x^3, data=dat)
cv.error = cv.glm(dat, iii)
cv.error$delta
iv <- glm(y ~ x + x^2 + x^3 + x^4, data=dat)
cv.error = cv.glm(dat, iv)
cv.error$delta
set.seed(5)
dat <- as.data.frame(cbind(x, y))
i <- glm(y ~ x, data=dat)
cv.error = cv.glm(dat, i)
cv.error$delta
ii <- glm(y ~ x + x^2, data=dat)
cv.error = cv.glm(dat, ii)
cv.error$delta
iii <- glm(y ~ x + x^2 + x^3, data=dat)
cv.error = cv.glm(dat, iii)
cv.error$delta
iv <- glm(y ~ x + x^2 + x^3 + x^4, data=dat)
cv.error = cv.glm(dat, iv)
cv.error$delta
dat <- as.data.frame(x, y))
set.seed(4)
dat <- as.data.frame(x, y)
dat <- data.frame(x, y)
View(dat)
glm.fit = glm(y ~ x)
i = glm(y ~ x)
cv.glm(Data, i)$delta
cv.glm(dat, i)$delta
set.seed(3)
y = rnorm(100)
x = rnorm(100)
y = x - 2 * x^2 + rnorm(100)
plot(x, y)
set.seed(4)
dat <- data.frame(x, y)
i = glm(y ~ x)
cv.glm(dat, i)$delta
ii = glm(y ~ poly(x, 2))
cv.glm(dat, ii)$delta
iii = glm(y ~ poly(x, 3))
cv.glm(dat, iii)$delta
iv = glm(y ~ poly(x, 4))
cv.glm(dat, iv)$delta
set.seed(3)
y = rnorm(100)
x = rnorm(100)
y = x - 2 * x^2 + rnorm(100)
dat <- data.frame(x, y)
i = glm(y ~ x)
cv.glm(dat, i)$delta
ii = glm(y ~ poly(x, 2))
cv.glm(dat, ii)$delta
iii = glm(y ~ poly(x, 3))
cv.glm(dat, iii)$delta
iv = glm(y ~ poly(x, 4))
cv.glm(dat, iv)$delta
set.seed(5)
i = glm(y ~ x)
cv.glm(dat, i)$delta
ii = glm(y ~ poly(x, 2))
cv.glm(dat, ii)$delta
iii = glm(y ~ poly(x, 3))
cv.glm(dat, iii)$delta
iv = glm(y ~ poly(x, 4))
cv.glm(dat, iv)$delta
summary(iv)
summary(i)
summary(ii)
summary(iii)
summary(iv)
library(MASS)
data(Boston)
require(Boston)
attach(Boston)
head(Boston)
u <- mean(Boston$medv)
u.error = sd(u)/sqrt(length(u))
Boston[index]
boot.fn = function(data, index) return(mean(data[index]))
u_boot = boot(u, boot.fn, 1000)
u_boot
u <- mean(Boston$medv)
set.seed(5)
u <- mean(Boston$medv)
u
u.error = sd(u)/sqrt(length(u))
u.error
u.error = sd(Boston$medv)/sqrt(length(Boston$medv))
u.error
boot.fn = function(data, index) return(mean(data[index]))
?boot()
u_boot = boot(Boston$medv, boot.fn, 1000)
u_boot
[u_boot-2(0.412335), u_boot+2(0.412335)]
ci <- c(u_boot-2(0.412335), u_boot+2(0.412335))
ci <- c((u_boot-2(0.412335)), (u_boot+2(0.412335)))
u_boot$t0
ci <- c((u_boot$t0 -2*0.412335), (u_boot$t0+2*0.412335))
t.test(Boston$medv)
ci
med <- median(medv)
med
boot.fn = function(data, index) return(median(data[index]))
med_boot = boot(Boston$medv, boot.fn, 1000)
med_boot
med_boot$std.error
med_boot$coef
str(med_boot)
med_boot
tenth <- quantile(Boston$medv)
tenth
?quantile
tenth <- quantile(Boston$medv, c(0.1))
tenth
Boston$medv
boot.fn = function(data, index) return(quantile(data[index], c(0.1)))
tenth_boot = boot(Boston$medv, boot.fn, 1000)
tenth_boot
,
data(USArrests)
attach(USArrests)
pr.out$rotation
pr.out=prcomp(USArrests, scale=TRUE)
pr.out$rotation
pr.va = pr.out$sdev^2
pr.var = pr.out$sdev^2
rm(pr.va)
pve = pr.var/sum(pr.var)
var.exp = pve[2]
pve
var.exp = pve[1] + pve[2]
?boot
boot.fn = function(data, index) {
data2 = data[index, ]
pr.out=prcomp(data2, scale=TRUE)
pr.var = pr.out$sdev^2
pve = pr.var/sum(pr.var)
var.exp = pve[1] + pve[2]
return(var.exp)
}
x <- boot(USArrests, boot.fn, 1000)
hist(x$t)
hist(x$t), main="Variance explained"
?hist
sd(pve1+pve2)
sd(pve[1] + pve[2])
sd(pve[1]) + sd(pve[2])
pr.out$sdev[1] + pr.out$sdev[2]
quantile(sd, probs=c(.025,.975))
head(x)
set.seed(6)
pr.out=prcomp(USArrests, scale=TRUE)
pr.var = pr.out$sdev^2
pve = pr.var/sum(pr.var)
var.exp = pve[1] + pve[2]
boot.fn = function(data, index) {
data2 = data[index, ]
pr.out=prcomp(data2, scale=TRUE)
pr.var = pr.out$sdev^2
pve = pr.var/sum(pr.var)
var.exp = pve[1] + pve[2]
return(var.exp)
}
x <- boot(USArrests, boot.fn, 1000)
hist(x$t, main="Variance explained")
boot.fn = function(data, index) {
data2 = data[index, ]
pr.out=prcomp(data2, scale=TRUE)
pr.var = pr.out$sdev^2
pve = pr.var/sum(pr.var)
var.exp = pve[1] + pve[2]
return(pve[1])
return(pve[2])
return(var.exp)
}
x <- boot(USArrests, boot.fn, 1000)
head(x)
x$t
pve
pve[1]
boot.fn = function(data, index) {
data2 = data[index, ]
pr.out=prcomp(data2, scale=TRUE)
return(pr.out$sdev[1])
return(pr.out$sdev[2])
pr.var = pr.out$sdev^2
pve = pr.var/sum(pr.var)
var.exp = pve[1] + pve[2]
return(var.exp)
}
x <- boot(USArrests, boot.fn, 1000)
boot.fn = function(data, index) {
data2 = data[index, ]
pr.out=prcomp(data2, scale=TRUE)
pr.var = pr.out$sdev^2
pve = pr.var/sum(pr.var)
return(pve[1])
return(pve[2])
var.exp = pve[1] + pve[2]
return(var.exp)
}
x <- boot(USArrests, boot.fn, 1000)
x
x$t
sd <- x$t
quantile(sd, probs=c(.025,.975))
pr.out=prcomp(USArrests, scale=TRUE)
pc1 <- pr.out$rotation
pc1 <- pr.out$rotation[,1]
pr.out$rotation
pca.fn = function(data, index) {
data2 = data[index, ]
pr.out=prcomp(data2, scale=TRUE)
pc1 <- pr.out$rotation
y = which.max(abs(pc1))
if(pc1[y] < 0){
pc1 = pc1 * -1
}
return(pc1)
}
y1 <- boot(USArrests, pca.fn, 1000)
y1
boxplot(y1)
setwd("/Users/peggyfan/Downloads/R_data/Developing_data_products/first_deck")
publish_github('shinyapp', 'PeggyFan')
library(shinyapp)
library(shinyapps)
library(slidify)
publish_github('shinyapps', 'PeggyFan')
publish_github('shinyapps', 'PeggyFan')
